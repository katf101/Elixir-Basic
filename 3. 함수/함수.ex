# 3.1 함수 선언
# 함수를 선언할 때는 def 키워드를 사용합니다. 함수의 이름과 인자
# 그리고 함수가 수행할 코드를 정의합니다. 함수의 반환 값은 항상
# 마지막 줄의 표현식(expression)의 값입니다.

# 예를 들어, 다음과 같이 add 함수를 정의할 수 있습니다.
def add(a, b) do
  a + b
end
# 위 코드에서는 add 함수가 a와 b라는 두 개의 인자를 받아서
# 두 인자의 합을 반환하는 기능을 수행합니다.

# 3.2 함수 호출
# 함수를 호출할 때는 함수 이름과 인자를 함께 적습니다.
# 인자는 쉼표 (,)로 구분하여 나열합니다.
# 예를 들어, 위에서 정의한 add 함수를 호출하려면 다음과 같이 작성합니다.
result = add(3, 5)
# 위 코드에서는 add 함수를 호출하고, 그 결과를 result 변수에 할당하고 있습니다.

# 3.3 익명 함수(Anonymous Function)
# 익명함수는 이름이 없는 함수를 말합니다.
# 익명 함수는 함수값으로 사용할 때 자주 활용됩니다.

# 익명 함수를 정의할 때는 fn 키워드와 -> 기호를 사용합니다.
# 예를 들어, 다음과 같이 두 수를 더하는 익명 함수를 정의할 수 있습니다.
sum = fn(a, b) -> a + b end
# 익명 함수를 호출할 때는 함수를 변수에 할당한 후 호출합니다.
# 예를 들어, 위에서 정의한 익명 함수를 호출하려면 다음과 같이 작성합니다.
result = sum.(3, 5)
# 위 코드에서는 sum 변수에 할당된 익명 함수를 호출하고, 그 결과를 result 변수에 할당하고 있습니다.
# 이렇게 함수를 선언하고 호출하는 방법을 익히면 엘릭서에서 함수를 자유롭게
# 활용할 수 있습니다.
