# 엘릭서에서는 반복문(Loop)으로 주로 for와 while을 사용합니다.

# 5.1 for문
# for문은 다음과 같은 형식으로 작성합니다.
for 변수 <- 리스트 또는 튜플 do
  # 변수를 사용한 처리
end
# for문은 리스트나 튜플에 포함된 요소들을 하나씩 꺼내서 변수에 할당하고, 이 변수를 사용하여 처리를 수행합니다.
# 예를 들어, 다음과 같은 코드에서는 numbers 리스트에 포함된 요소들을 하나씩 꺼내서 x 변수에 할당하고, x 변수의 값을 출력합니다.
numbers = [1, 2, 3, 4, 5]
for x <- numbers do
  IO.puts(x)
end
# for문은 리스트나 튜플뿐만 아니라 맵(Map)에 대해서도 사용할 수 있습니다.
map = %{a: 1, b: 2, c: 3}
for {k, v} <- map do
  IO.puts("#{k}: #{v}")
end
# 위 코드에서는 map 변수에 포함된 키와 값을 하나씩 꺼내서 k와 v 변수에 할당하고
# 이 변수를 사용하여 키와 값의 쌍을 출력합니다.
while 조건 do
  # 조건이 참인 경우 수행할 코드
end
# 조건은 참 또는 거짓이 될 수 있는 식(expression)이어야 하며
# 이 식의 값에 따라 while문의 반복 여부가 결정됩니다.
# while문은 주로 무한 루프(infinite loop)를 작성할 때 사용합니다.
# 예를 들어, 다음과 같은 코드에서는 무한 루프를 돌면서 사용자로부터 입력을 받아서 처리합니다.
while true do
  input = IO.gets("Enter your input: ")
  # 입력을 처리하는 코드
end
# 이렇게 for문과 while문을 활용하면, 엘릭서에서 다양한 반복 처리를 수행할 수 있습니다.
